#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May  7 14:19:08 2019

@author: Seahymn
"""

LOSS_FUNCTION = 'binary_crossentropy'
#OPTIMIZER = 'adamax'
OPTIMIZER = 'sgd'

from keras.models import Model
from keras.layers import Input, Dense,Embedding,Flatten
from keras.layers.core import Dropout

def DNN_embedding_network(MAX_LEN, EMBEDDING_DIM, word_index, embedding_matrix, use_dropout=True):
    
    inputs = Input(shape=(MAX_LEN,))
    sharable_embedding = Embedding(len(word_index) + 1,
                               EMBEDDING_DIM,
                               weights=[embedding_matrix],
                               input_length=MAX_LEN,
                               trainable=False)(inputs)
    dense = Flatten()(sharable_embedding)
    dense_0 = Dense(128, activation='relu')(dense)
    
    if use_dropout:
        dropout_layer_2 = Dropout(0.5)(dense_0)
        dense_1 = Dense(128, activation='relu')(dropout_layer_2)
    else:
        dense_1 = Dense(128, activation='relu')(dense_0)
        
    if use_dropout:
        dropout_layer_3 = Dropout(0.5)(dense_1)
        dense_2 = Dense(64, activation='relu')(dropout_layer_3)
    else:
        dense_2 = Dense(64, activation='relu')(dense_1)

    dense_3 = Dense(32)(dense_2)
    dense_4 = Dense(1, activation='sigmoid')(dense_3)
    
    model = Model(inputs=inputs, outputs = dense_4, name='DNN_embedding_network')
    
    model.compile(loss=LOSS_FUNCTION,
             optimizer=OPTIMIZER,
             metrics=['accuracy'])
    
    return model